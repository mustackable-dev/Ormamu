using System.Data;
using System.Text.Json;
using Ormamu;
using DbUp;
using DbUp.Engine;
using Npgsql;
using OrmamuTests.Entities;

namespace OrmamuTests.DbProviders.Implementations;

public class PostgreSqlDbProvider: IDbProvider
{
    public PostgreSqlDbProvider()
    {
        Options = TestsConfig.DbOptions[SqlDialect.PostgreSql];
        
        SchemaName = TestsConfig.SchemaName;
        
        ReadTestsTableName = TestsConfig.ReadTestsTableName;
        
        CreateTestsTableName = TestsConfig.CreateTestsTableName;
        
        UpdateTestsTableName = TestsConfig.UpdateTestsTableName;
        
        DeleteTestsTableName = TestsConfig.DeleteTestsTableName;
        
        CompositeKeyTestsTableName = TestsConfig.CompositeKeyTestsTableName;
    }
    
    private const string ConnectionString =
        "User ID=postgres;Password=Test123!;Host=localhost;Port=5433;Database=OrmamuTests;" +
        "Pooling=true;Connection Lifetime=0;";

    public IDbConnection GetConnection()
        => new NpgsqlConnection(ConnectionString);

    public OrmamuOptions Options { get; }
    
    private string SchemaName { get; }
    private string ReadTestsTableName { get; }
    private string CreateTestsTableName { get; }
    private string UpdateTestsTableName { get; }
    private string DeleteTestsTableName { get; }
    private string CompositeKeyTestsTableName { get; }

    public void DeployTestData()
    {
        Stream? testDataStream = typeof(IDbProvider)
            .Assembly
            .GetManifestResourceStream("OrmamuTests.Data.TestData.json");

        Goblin[] sampleData =  testDataStream is not null ? 
            JsonSerializer.Deserialize<Goblin[]>(testDataStream)!:
            [];

        using IDbConnection connection = GetConnection();
        connection.BulkInsert(sampleData);
    }

    public void WipeCreateTestsData()
    {
        using NpgsqlConnection connection = new(ConnectionString);
        connection.Open();
        using NpgsqlCommand command = new(
            $"""
             TRUNCATE TABLE "{SchemaName}"."{CreateTestsTableName}";
             """, connection);
        command.ExecuteNonQuery();
    }

    public void DeploySchema()
    {
        EnsureDatabase.For.PostgresqlDatabase(ConnectionString);
        DropSchema();
        EnsureSchema();
        object[] scriptPayload =
        [
            SchemaName,
            ReadTestsTableName,
            CreateTestsTableName,
            UpdateTestsTableName,
            DeleteTestsTableName,
            CompositeKeyTestsTableName
        ];

        UpgradeEngine engine =
            DeployChanges.To
                .PostgresqlDatabase(ConnectionString)
                .JournalToPostgresqlTable(SchemaName, "schema_versions")
                .WithScript(new SqlScript(
                    "Deploy",
                    string.Format(_deployScript, scriptPayload)))
                .LogToConsole()
                .Build();

        DatabaseUpgradeResult result = engine.PerformUpgrade();

        if (!result.Successful)
        {
            Console.WriteLine(
                $"Error occured when applying script {result.ErrorScript.Name} " +
                $"with content:\n\n{result.ErrorScript.Contents}");
            throw result.Error;
        }

        Console.WriteLine("Schema deploy successful!");
    }

    private void EnsureSchema()
    {
        using NpgsqlConnection connection = new(ConnectionString);
        connection.Open();
        
        using NpgsqlCommand command = new(
            $"CREATE SCHEMA IF NOT EXISTS \"{SchemaName}\"", connection);
        
        command.ExecuteNonQuery();
        connection.Close();
    }

    private void DropSchema()
    {
        using NpgsqlConnection connection = new(ConnectionString);
        connection.Open();
        using NpgsqlCommand command = new($"DROP SCHEMA IF EXISTS \"{SchemaName}\" CASCADE", connection);
        command.ExecuteNonQuery();
    }

    private readonly string _deployScript = 
        """
        CREATE TABLE "{0}"."{1}" (
          "id" int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
          "name" text NOT NULL,
          "favourite_letter" bpchar(1) NOT NULL,
          "age" int2 NOT NULL,
          "stamina" int2 NOT NULL,
          "magic_power" int8 NOT NULL,
          "strength" float4 NOT NULL,
          "agility" float8 NOT NULL,
          "salary" numeric NOT NULL,
          "is_active" bool NOT NULL,
          "date_of_birth" timestamptz NOT NULL,
          "hobbit_ancestry" bool NULL,
          CONSTRAINT "PK_{1}" PRIMARY KEY ("id")
        );
        CREATE TABLE "{0}"."{2}" (
          "id" int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
          "name" text NOT NULL,
          "strength" float4 NOT NULL,
          "height" int2 NOT NULL,
          "is_active" bool NOT NULL,
          "hobbit_ancestry" bool NULL,
          CONSTRAINT "PK_{2}" PRIMARY KEY ("id")
        );
        CREATE TABLE "{0}"."{3}" (
          "id" text NOT NULL,
          "name" text NOT NULL,
          "strength" float4 NOT NULL,
          "height" int2 NOT NULL,
          "is_active" bool NOT NULL,
          CONSTRAINT "PK_{3}" PRIMARY KEY ("id")
        );
        CREATE TABLE "{0}"."{4}" (
          "id" int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
          "magic_power" int8 NOT NULL,
          "date_of_birth" timestamptz NOT NULL,
          CONSTRAINT "PK_{4}" PRIMARY KEY ("id")
        );
        CREATE TABLE "{0}"."{5}" (
          "id" int4 NOT NULL,
          "name" text NOT NULL,
          "personality" int2 NOT NULL,
          CONSTRAINT "PK_{5}" PRIMARY KEY ("id", "name")
        );
        """;
}